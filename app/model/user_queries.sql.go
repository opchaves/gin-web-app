// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: user_queries.sql

package model

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users ("first_name", "last_name", "email", "password", "last_login", "active", "role") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, first_name, last_name, email, password, role, last_login, active, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	FirstName string           `json:"first_name"`
	LastName  string           `json:"last_name"`
	Email     string           `json:"email"`
	Password  string           `json:"password"`
	LastLogin pgtype.Timestamp `json:"last_login"`
	Active    bool             `json:"active"`
	Role      string           `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.LastLogin,
		arg.Active,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.LastLogin,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const createUserWithId = `-- name: CreateUserWithId :one
INSERT INTO users ("id", "first_name", "last_name", "email", "password", "last_login", "active", "role") VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id, first_name, last_name, email, password, role, last_login, active, created_at, updated_at, deleted_at
`

type CreateUserWithIdParams struct {
	ID        pgtype.UUID      `json:"id"`
	FirstName string           `json:"first_name"`
	LastName  string           `json:"last_name"`
	Email     string           `json:"email"`
	Password  string           `json:"password"`
	LastLogin pgtype.Timestamp `json:"last_login"`
	Active    bool             `json:"active"`
	Role      string           `json:"role"`
}

func (q *Queries) CreateUserWithId(ctx context.Context, arg CreateUserWithIdParams) (*User, error) {
	row := q.db.QueryRow(ctx, createUserWithId,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.LastLogin,
		arg.Active,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.LastLogin,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users SET
  deleted_at = now(),
  updated_at = now()
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, first_name, last_name, email, password, role, last_login, active, created_at, updated_at, deleted_at FROM users WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.LastLogin,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, first_name, last_name, email, password, role, last_login, active, created_at, updated_at, deleted_at FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id pgtype.UUID) (*User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.LastLogin,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const hardDeleteUser = `-- name: HardDeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) HardDeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, hardDeleteUser, id)
	return err
}

const listUsers = `-- name: ListUsers :many
SELECT id, first_name, last_name, email, password, role, last_login, active, created_at, updated_at, deleted_at FROM users ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]*User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Password,
			&i.Role,
			&i.LastLogin,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
