// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: workspace_queries.sql

package model

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createWorkspace = `-- name: CreateWorkspace :one
INSERT INTO workspaces ("name", "description", "currency", "language", "user_id") VALUES ($1, $2, $3, $4, $5) RETURNING id, name, description, currency, language, user_id, created_at, updated_at, deleted_at
`

type CreateWorkspaceParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Currency    string      `json:"currency"`
	Language    string      `json:"language"`
	UserID      uuid.UUID   `json:"user_id"`
}

func (q *Queries) CreateWorkspace(ctx context.Context, arg CreateWorkspaceParams) (*Workspace, error) {
	row := q.db.QueryRow(ctx, createWorkspace,
		arg.Name,
		arg.Description,
		arg.Currency,
		arg.Language,
		arg.UserID,
	)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Currency,
		&i.Language,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const getUserWorkspaces = `-- name: GetUserWorkspaces :many
SELECT id, name, description, currency, language, user_id, created_at, updated_at, deleted_at FROM workspaces WHERE user_id = $1
`

func (q *Queries) GetUserWorkspaces(ctx context.Context, userID uuid.UUID) ([]*Workspace, error) {
	rows, err := q.db.Query(ctx, getUserWorkspaces, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Workspace
	for rows.Next() {
		var i Workspace
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Currency,
			&i.Language,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspaceByID = `-- name: GetWorkspaceByID :one
SELECT id, name, description, currency, language, user_id, created_at, updated_at, deleted_at FROM workspaces WHERE id = $1
`

func (q *Queries) GetWorkspaceByID(ctx context.Context, id uuid.UUID) (*Workspace, error) {
	row := q.db.QueryRow(ctx, getWorkspaceByID, id)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Currency,
		&i.Language,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const updateWorkspace = `-- name: UpdateWorkspace :exec
UPDATE workspaces SET "name" = $2, "description" = $3, "currency" = $4, "language" = $5 WHERE id = $1
`

type UpdateWorkspaceParams struct {
	ID          uuid.UUID   `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Currency    string      `json:"currency"`
	Language    string      `json:"language"`
}

func (q *Queries) UpdateWorkspace(ctx context.Context, arg UpdateWorkspaceParams) error {
	_, err := q.db.Exec(ctx, updateWorkspace,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Currency,
		arg.Language,
	)
	return err
}
